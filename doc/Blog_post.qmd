---
title: "Demand of Football in European Leagues"
subtitle: "DATA 450 Capstone"
author: "Matthew Wilcox"
bibliography: references.bib
number-sections: true
format:
  html:
    theme: default
    rendering: embed-resources
    code-fold: true
    code-tools: true
  pdf: default
jupyter: python3
---

```{python}
#| code-fold: true
#| code-summary: "Library Packages"
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn import metrics
from sklearn.linear_model import LinearRegression
import july
from datetime import datetime as dt

```



```{python}
#| code-fold: true
#| code-summary: "Data Import"

total_data = pd.read_pickle('../data/final_datasets/data_standardized.pkl')
print(total_data.head(10))

```




```{python}
#| code-fold: true
#| code-summary: "Time Data Processing"

time_df = total_data[[
    'date', 'time', 'day_of_week', 'date_time', 'raw_attendance', 'capacity_filled', 'standard_attend'
]]


df_grouped_mean = time_df.groupby('day_of_week')['raw_attendance', 'capacity_filled', 'standard_attend'].mean().reset_index()
df_grouped_median = time_df.groupby('day_of_week')['raw_attendance', 'capacity_filled', 'standard_attend'].median().reset_index()

day_categories = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
df_grouped_median['day_of_week'] = pd.Categorical(df_grouped_median['day_of_week'], categories= day_categories)
df_grouped_median.sort_values(by = 'day_of_week', inplace = True)
```


```{python}
#| code-fold: true
#| code-summary: "Day of the Week Standardized Median"

sns.barplot(data=df_grouped_median, x = 'day_of_week', y = 'raw_attendance').set(title ='Median  Attendance by Day of Week')
plt.xticks(rotation=90)
plt.xlabel('Day of the Week')
plt.ylabel('Median Attendance')
plt.show()
```


```{python}
#| code-fold: true
#| code-summary: "Day of the Week total Count"
grouped_week_count = time_df.groupby('day_of_week').count().reset_index()

grouped_week_count['day_of_week'] = pd.Categorical(grouped_week_count['day_of_week'], categories= day_categories)
grouped_week_count.sort_values(by = 'day_of_week', inplace = True)


sns.barplot(data = grouped_week_count, x = 'day_of_week', y = 'date')
plt.xlabel('Day of the Week')
plt.ylabel('Count')
plt.title('Number of games per day of the Week')
plt.show()
```

```{python}
#| code-fold: true
#| code-summary: "Attendance Time of Day"


df_grouped_mean_tod= time_df.groupby(time_df['date_time'].dt.hour).mean()
df_grouped_median_tod= time_df.groupby(time_df['date_time'].dt.hour).median()


sns.lineplot(data = df_grouped_median_tod, x = 'date_time', y = 'raw_attendance', markers = True, marker = "o" )
plt.title('Attendance by Time of Day')
plt.xlabel('Hour of the Day')
plt.ylabel('Attendance')
plt.show()
```

```{python}
#| code-fold: true
#| code-summary: "Number of Games Time of Day"
df_grouped_count = time_df.groupby(time_df['date_time'].dt.hour).count()
# print(df_grouped_count)
df_grouped_count = df_grouped_count['raw_attendance'].reset_index()
df_grouped_count['count'] = df_grouped_count['raw_attendance']
df_grouped_count = df_grouped_count[['date_time', 'count']]
# df_grouped_count= df_grouped_count.rename(columns = {'date':'count'})
# print(df_grouped_count)

df_count_atted = pd.merge(df_grouped_count, df_grouped_median_tod, on = 'date_time')
df_count_atted = df_count_atted.drop(columns= ['capacity_filled'])
df_count_atted.rename( columns = {'raw_attendance': 'Attendance', 'count': "Number of Games"}, inplace= True)
# print(df_count_atted)
melted_count_attend = pd.melt(df_count_atted, value_vars=['Number of Games', 'Attendance'], id_vars= 'date_time')
# print(melted_count_attend)

sns.lineplot(data = melted_count_attend, x = 'date_time', y = 'value', hue = 'variable')
plt.title('Attendance and Game Count by Time of Day')
plt.xlabel('Hour of the Day')

plt.show()
```


```{python}
calendar_plot_data = total_data
calendar_plot_data['month_day'] = calendar_plot_data['date_time'].dt.strftime('%m-%d')


```

```{python}
date_of_year = calendar_plot_data.groupby('month_day').count()
date_of_year['count'] = date_of_year['standard_attend']
date_of_year = date_of_year['count'].sort_values().reset_index()
print(date_of_year)
date_of_year['total_date'] = '2024-' + date_of_year['month_day']
date_of_year['total_date']= pd.to_datetime(date_of_year['total_date'], format = "%Y-%m-%d")
events = pd.Series(date_of_year['count'].values.tolist(), index = date_of_year['total_date'].values.tolist())
july.heatmap(dates = date_of_year['total_date'], data = date_of_year['count'],  date_label = True, cmap = 'RdYlBu', fontsize =10, weekday_label=False, year_label= False, title = '# of Games per day 2010-2019', colorbar= True, dpi =1200)
plt.show()
```

```{python}
attend_date = calendar_plot_data.groupby('month_day').mean()
attend_date['count'] = attend_date['standard_attend']
attend_date = attend_date['count'].sort_values().reset_index()
attend_date['total_date'] = '2024-' + attend_date['month_day']

attend_date['total_date'] = pd.to_datetime(attend_date['total_date'], format = "%Y-%m-%d")
events = pd.Series(attend_date['count'].values.tolist(), index = attend_date['total_date'].values.tolist())
july.heatmap(dates = attend_date['total_date'], data = attend_date['count'],  cmap='RdYlBu', date_label = True, fontsize =10, weekday_label=False, year_label= False, title = 'Avg Attendance per day Standardized 2010-2019', colorbar= True, dpi =1200)
plt.show()

```



```{python}
away_team_impact = total_data.groupby(['away_team', 'division'])['standard_attend'].mean().reset_index()


# away_team_impact = away_team_impact[away_team_impact['division'].isin(['E3', 'E1', 'E2'])]
div_dict = {'D1':'Bundesliga', 'D2': '2. Bundesliga', 'E0':'Premier League', 'E1':'Championship', 
            'E2':'League 1', 'E3':'Leauge 2','SP1':'La Liga Primera', 'SP2':'La Liga Segunda',
              'B1':'Jupiler League', 'F1':'Ligue 1','F2':'Ligue 2','I1':'Serie A','I2':'Seire B', 
              'SC0':'Scotish Premier League', 'SC1':'Scotish Division 1', 'T1':'Fubol Ligi 1', 'P1': 'Liga 1'}
divisions_list =['D1', 'D2', 'E0', 'E1', 'E2', 'E3', 'SP1' ,'SP2', 'B1', 'F1', 'F2', 'I1', 'I2', 'SC0', 'SC1', 'T1', 'P1']

away_team_impact = away_team_impact[['away_team', 'division', 'standard_attend']]
print(away_team_impact)
initial_graph_df = pd.DataFrame(columns = ['away_team', 'division', 'standard_attend'])

for i in divisions_list:
        temp_impact_df = away_team_impact[away_team_impact['division'] == i].sort_values('standard_attend',ascending = False).head(3)
        initial_graph_df = pd.concat([initial_graph_df, temp_impact_df], axis = 0)

from jupyter_dash import JupyterDash
from dash import html, dcc, Input, Output
import plotly.graph_objects as go
import plotly.express as px
# fig = go.Figure(px.bar(away_team_impact, y= 'away_team', x = 'standard_attend', color = 'division'))

app = JupyterDash(__name__)
app.layout = html.Div(id = 'parent', children = [
    html.H1(id = 'H1', children = 'Away Team Impact'),
    dcc.Slider(0,20,1, value =3,id = 'slider'),
    dcc.Dropdown(id = 'dropdown', 
                 options = [
                {'label': 'Bundesliga', 'value':'D1'},
                {'label': '2. Bundesliga', 'value':'D2'},
                {'label': 'Premier League', 'value':'E0'},
                {'label': 'Championship', 'value':'E1'},
                {'label': 'League 1', 'value':'E2'},
                {'label': 'Leauge 2', 'value':'E3'},
                {'label': 'La Liga Primera', 'value':'SP1'},
                {'label': 'La Liga Segunda', 'value':'SP2'},
                {'label': 'Jupiler League', 'value':'B1'},
                {'label': 'Ligue 1', 'value':'F1'},
                {'label': 'Ligue 2', 'value':'F2'},
                {'label': 'Serie A', 'value':'I1'},
                {'label': 'Serie B', 'value':'I2'},
                {'label': 'Scotish Premier League', 'value':'SC0'},
                {'label': 'Scotish Division 1', 'value':'SC1'},
                {'label': 'Fubol Ligi 1', 'value':'T1'},
                {'label': 'Liga 1', 'value':'P1'}


                 ], value = ['D1', 'D2', 'E0', 'E1', 'E2', 'E3', 'SP1' ,'SP2', 'B1', 'F1', 'F2', 'I1', 'I2', 'SC0', 'SC1', 'T1', 'P1'],
                 multi = True),
    dcc.Graph(id = 'bar_plot', figure=px.bar(initial_graph_df, x='away_team', y='standard_attend', color='division'))
])

@app.callback(
    Output("bar_plot", "figure"), 
    [Input("dropdown", "value"),
     Input('slider', 'value')]
    )
def update_graph(drop_value, slider_value):
    # print(value)
    df = away_team_impact

    

    df = df[df['division'].isin(list(drop_value))]
    graph_df = pd.DataFrame(columns = ['away_team', 'division', 'standard_attend'])
    for i in drop_value:
        temp_impact_df = df[df['division'] == i].sort_values('standard_attend',ascending = False).head(slider_value)
        graph_df = pd.concat([graph_df, temp_impact_df], axis = 0)
    graph_df = graph_df.reset_index().drop(columns = ['index'])
    fig = px.bar(graph_df, x= 'away_team', y= 'standard_attend', color = 'division')
    return fig
if __name__ == '__main__':
    app.run_server(mode='inline')
```